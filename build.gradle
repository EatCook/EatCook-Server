plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.18'
    id "org.sonarqube" version "4.4.1.3373"
}

sonar {
    properties {
        property "sonar.projectKey", "EatCook_EatCook-Server"
        property "sonar.organization", "eatcook-server"
        property "sonar.host.url", "https://sonarcloud.io"
        property 'sonar.sources', 'src'
        property 'sonar.language', 'java'
        property 'sonar.sourceEncoding', 'UTF-8'
        property 'sonar.test.inclusions', '**/*Test.java'
        // 테스트 커버리지에서 빼고싶은거 넣어야함
        property 'sonar.exclusions', '**/test/**, **/Q*.java, **/*Doc*.java, **/resources/** ,**/*Application*.java , **/*Config*.java,' +
                '**/*Dto*.java, **/*Request*.java, **/*Response*.java ,**/*Exception*.java ,**/*ErrorCode*.java'
        property 'sonar.java.coveragePlugin', 'jacoco'
    }
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java-test-fixtures'
    apply plugin: 'jacoco'

    group = 'com.itcook'
    version = '0.0.1-SNAPSHOT'
    java {
        sourceCompatibility = JavaVersion.VERSION_17
    }

    repositories {
        mavenCentral()
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    jacoco {
        toolVersion = '0.8.8'
    }

    jacocoTestReport {
        dependsOn test
        reports {
            html.required = true // html 설정
            csv.required = true // csv 설정
            xml.required = true
            //xml 의 위치 조정
            xml.destination file("${buildDir}/reports/jacoco.xml")
        }
        def Qdomains = []
        for (qPattern in '**/QA'..'**/QZ') { // qPattern = '**/QA', '**/QB', ... '*.QZ'
            Qdomains.add(qPattern + '*')
        }
        afterEvaluate {
            classDirectories.setFrom(
                    files(classDirectories.files.collect {
                        fileTree(dir: it, excludes: [
                                // 측정 안하고 싶은 패턴
                                "**/*Application*",
                                "**/*Config*",
                                "**/*Dto*",
                                "**/dto/**",
                                "**/*Request*",
                                "**/*Response*",
                                "**/*Interceptor*",
                                "**/*Exception*"
                                // Querydsl 관련 제거
                        ] + Qdomains)
                    })
            )
        }
    }

    subprojects {
        apply plugin: 'org.sonarqube'

        sonarqube {
            properties {
                // 각 프로젝트마다 적용해야하는부분.
                property 'sonar.java.binaries', "${buildDir}/classes"
                property 'sonar.coverage.jacoco.xmlReportPaths', "${buildDir}/reports/jacoco.xml"
            }
        }
    }

    dependencies {
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testCompileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'

        testRuntimeOnly 'com.h2database:h2'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'

    }

    tasks.named('test',Test) {
        useJUnitPlatform()
        finalizedBy jacocoTestReport
    }
}

project(':itcook-api') {
    bootJar {
        enabled = true
    }
    jar {
        // java test fixtures 때문에
        enabled = true
    }
    dependencies {
        implementation project(':itcook-domain')
        runtimeOnly project(':itcook-infra')

        testImplementation(testFixtures(project(':itcook-domain')))
    }
}

project(':itcook-batch') {
    bootJar {
        enabled = true
    }
    jar {
        // java test fixtures 때문에
        enabled = true
    }
    dependencies {
        implementation project(':itcook-domain')
        runtimeOnly project(':itcook-infra')
    }
}

project(':itcook-domain') {
    bootJar {
        enabled = false
    }
    jar {
        enabled = true
    }
}

project(':itcook-infra') {
    bootJar {
        enabled = false
    }
    jar {
        enabled = true
    }
    dependencies {
        implementation project(':itcook-domain')
    }
}

bootJar {
    enabled = false
}

jar {
    enabled = false
}